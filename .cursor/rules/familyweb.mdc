---
description: 
globs: 
alwaysApply: false
---
---
description: "家庭网站交互平台项目规则 - 技术栈、设计系统、开发规范与工作流程"
globs: ["family-platform/**/*"]
alwaysApply: true
---

# 🏠 家庭网站交互平台 - Cursor Project Rules

## 📋 项目基本信息

**项目名称：** 家庭网站交互平台 (Family Web Platform)  
**技术定位：** 现代化全栈 Web 应用，家庭知识库与互动平台  
**当前状态：** 基础设施完成，进入前端设计优化阶段

## 🏗️ 技术栈规范

### ✅ 已确认架构
- **前端：** Next.js 15.3.3 + TypeScript + Tailwind CSS v4
- **组件库：** Headless UI + Heroicons
- **后端：** Supabase (认证 + PostgreSQL + API)
- **部署：** Vercel + GitHub 自动部署
- **包管理：** npm (不使用 yarn/pnpm)

### 🎨 设计系统
```css
/* 主色调 - 温暖家庭感 */
--primary-500: #f97316;   /* 主橙色 */
--secondary-500: #3b82f6; /* 主蓝色 */
--success: #10b981;       /* 成功绿 */
--warning: #f59e0b;       /* 警告黄 */
--error: #ef4444;         /* 错误红 */
```

### 📐 空间系统
- **基准单位：** 4px (0.25rem)
- **组件间距：** 8px, 16px, 24px, 32px
- **断点：** sm:640px, md:768px, lg:1024px, xl:1280px

## 📂 项目结构

```
family-platform/
├── docs/                    # 项目文档
│   ├── PROJECT_RULES.md     # 完整项目规范
│   └── DEVELOPMENT_GUIDE.md # 开发快速指南
├── src/
│   ├── app/                 # Next.js App Router
│   ├── components/          # React 组件
│   │   ├── ui/              # 基础 UI 组件
│   │   ├── layout/          # 布局组件
│   │   └── features/        # 功能组件
│   ├── lib/                 # 工具库
│   │   ├── supabase.ts      # Supabase 客户端
│   │   ├── utils.ts         # 工具函数
│   │   └── constants.ts     # 常量定义
│   ├── types/               # TypeScript 类型
│   └── hooks/               # 自定义 Hooks
├── public/                  # 静态资源
└── supabase/                # 数据库相关
```

## 🎯 当前开发重点

### 📅 第一阶段：设计系统建设 (1-2天)
- [ ] 自定义 Tailwind 主题配置
- [ ] 基础 UI 组件库 (Button, Card, Modal)
- [ ] 响应式布局系统
- [ ] 移动端优先设计

### 🔑 关键文件位置
- **完整规范：** `family-platform/docs/PROJECT_RULES.md`
- **Tailwind 配置：** `family-platform/tailwind.config.js`
- **Supabase 客户端：** `family-platform/src/lib/supabase.ts`
- **类型定义：** `family-platform/src/types/index.ts`

## 🔧 开发规范

### 💻 编码标准
- **语言：** TypeScript 严格模式，完整类型定义
- **组件：** React 函数组件 + Hooks
- **样式：** Tailwind CSS，避免自定义 CSS
- **状态管理：** React 内置 (useState, useContext)
- **数据获取：** Supabase 客户端 + SWR

### 📱 响应式原则
- **移动端优先：** Mobile-first 设计方法
- **触摸友好：** 按钮最小 44px 点击区域
- **布局方式：** Flexbox + CSS Grid
- **导航结构：** 顶部导航 + 移动端底部导航

### ⚡ 性能要求
- **首屏加载：** < 1.5s
- **交互响应：** < 100ms
- **Lighthouse：** > 90分
- **图片优化：** Next.js Image 组件 + WebP

## 🔒 安全规范

- **认证：** Supabase Auth，支持邮箱/社交登录
- **权限：** RLS (Row Level Security) 数据访问控制
- **验证：** 前后端双重输入验证
- **传输：** 全站 HTTPS 加密

## 🚨 常见问题排查

1. **构建失败** → 检查 TypeScript 类型错误
2. **部署错误** → 查看 Vercel 部署日志
3. **样式问题** → 确认 Tailwind 配置正确
4. **数据库问题** → 检查 Supabase 连接配置

## 📋 Git 提交规范

```bash
# 功能开发
feat: 添加用户认证功能

# 问题修复
fix: 修复移动端导航样式问题

# 文档更新
docs: 更新 API 文档

# 样式调整
style: 优化按钮组件样式

# 性能优化
perf: 优化图片加载性能
```

## 🔄 工作流程

1. **本地开发** → `npm run dev`
2. **构建测试** → `npm run build`
3. **Git 提交** → 语义化提交信息
4. **推送 GitHub** → 触发 Vercel 自动部署
5. **验证部署** → 检查生产环境

---

## 🎯 核心原则

1. **用户体验优先** - 移动端友好，加载快速
2. **代码质量** - TypeScript 严格模式，组件化设计
3. **设计一致性** - 遵循设计系统，统一视觉语言
4. **性能优化** - 图片优化，代码分割，缓存策略
5. **安全可靠** - 数据权限控制，输入验证

## 📚 完整文档体系

### 🎯 核心规范文档
- **[项目规则与开发指南](mdc:family-platform/docs/PROJECT_RULES.md)** - 完整的项目规范、技术栈、设计系统
- **[开发快速指南](mdc:family-platform/docs/DEVELOPMENT_GUIDE.md)** - 快速启动命令和开发要点

### 🔧 技术文档
- **[API 文档](mdc:family-platform/docs/API.md)** - Supabase 集成、认证流程、数据库结构
- **[部署文档](mdc:family-platform/docs/DEPLOYMENT.md)** - Vercel 部署流程、环境配置、故障排查
- **[组件设计指南](mdc:family-platform/docs/COMPONENTS.md)** - UI 组件架构、设计原则、开发规范

### 📖 文档使用指引
1. **开发前必读：** `PROJECT_RULES.md` - 了解项目整体规范
2. **快速开始：** `DEVELOPMENT_GUIDE.md` - 获取开发命令和要点
3. **API 集成：** `API.md` - 了解后端服务和数据结构
4. **组件开发：** `COMPONENTS.md` - 遵循 UI 组件设计规范
5. **部署上线：** `DEPLOYMENT.md` - 了解部署流程和配置

---

## 🤖 Cursor AI 开发指引

### 📝 代码生成规范
- **优先使用项目已有的组件和模式**
- **遵循 TypeScript 严格模式，提供完整类型定义**
- **使用 Tailwind CSS 类，避免内联样式**
- **组件应该是可复用和可测试的**
- **遵循 React 最佳实践，使用函数组件和 Hooks**

### 🔍 问题解决优先级
1. **首先查阅** `family-platform/docs/PROJECT_RULES.md`
2. **检查现有代码模式**，保持一致性
3. **使用项目定义的类型**，在 `src/types/index.ts`
4. **遵循设计系统**，使用定义的颜色和间距
5. **确保响应式设计**，移动端优先

### ⚡ 常用开发模式
```typescript
// 组件结构
interface ComponentProps {
  // 完整的类型定义
}

export default function Component({ prop }: ComponentProps) {
  // 使用 TypeScript 严格模式
  // 使用 Tailwind CSS 类
  // 遵循响应式设计原则
}
```

### 🎨 样式使用指南
```css
/* 使用设计系统中定义的颜色 */
bg-orange-500    /* 主色调 */
bg-blue-500      /* 辅助色 */
bg-green-500     /* 成功色 */

/* 使用统一的间距 */
p-4 m-4          /* 16px */
p-6 m-6          /* 24px */
p-8 m-8          /* 32px */
```